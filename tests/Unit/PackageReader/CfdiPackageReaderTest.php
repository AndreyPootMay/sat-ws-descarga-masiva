<?php

declare(strict_types=1);

namespace PhpCfdi\SatWsDescargaMasiva\Tests\Unit\PackageReader;

use PhpCfdi\SatWsDescargaMasiva\PackageReader\CfdiPackageReader;
use PhpCfdi\SatWsDescargaMasiva\Tests\TestCase;
use RuntimeException;

/**
 * This tests uses the Zip file located at tests/_files/zip/cfdi.zip that contains:
 *
 * __MACOSX/ // commonly generated by MacOS when open the file
 * __MACOSX/.aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml // commonly generated by MacOS when open the file
 * aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml // valid cfdi with common name
 * aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml.xml // valid cfdi with double extension (oh my SAT!)
 * 00000000-0000-0000-0000-000000000000.xml // file with correct name but not a cfdi
 * empty-file // zero bytes file
 * other.txt // file with incorrect extension and incorrect content
 *
 */
class CfdiPackageReaderTest extends TestCase
{
    public function testReaderZipWhenTheContentIsInvalid(): void
    {
        $zipContents = 'INVALID_ZIP_CONTENT';
        $this->expectException(RuntimeException::class);
        $this->expectExceptionMessage('Could not open zip');
        CfdiPackageReader::createFromContents($zipContents);
    }

    public function testReaderZipWhenTheContentValid(): void
    {
        $zipContents = $this->fileContents('zip/cfdi.zip');
        $cfdiPackageReader = CfdiPackageReader::createFromContents($zipContents);
        $temporaryFilename = $cfdiPackageReader->getFilename();
        unset($cfdiPackageReader);
        $this->assertFileDoesNotExist(
            $temporaryFilename,
            'When creating a CfdiPackageReader from contents, once it is destroyed relative file must not exists'
        );
    }

    public function testReaderZipWithOtherFiles(): void
    {
        $expectedNumberCfdis = 2;

        $filename = $this->filePath('zip/cfdi.zip');
        $cfdiPackageReader = new CfdiPackageReader($filename);

        $this->assertCount($expectedNumberCfdis, $cfdiPackageReader);
    }

    public function testReaderZipWithOtherFilesAndDoubleXmlExtension(): void
    {
        // there are 2 valid files:
        // "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml" and
        // "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml.xml"
        $expectedFilenames = [
            "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml",
            "aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee.xml.xml"
        ];
        sort($expectedFilenames);

        $filename = $this->filePath('zip/cfdi.zip');
        $cfdiPackageReader = new CfdiPackageReader($filename);

        $filenames = array_keys(iterator_to_array($cfdiPackageReader->fileContents()));
        sort($filenames);
        $this->assertEquals($expectedFilenames, $filenames);
    }

    public function testReaderCfdiInZip(): void
    {
        $expectedCfdi = $this->fileContents('zip/cfdi.xml');

        $zipFilename = $this->filePath('zip/cfdi.zip');
        $cfdiPackageReader = new CfdiPackageReader($zipFilename);

        $cfdi = $cfdiPackageReader->fileContents()->current();
        $this->assertEquals($expectedCfdi, $cfdi);
    }
}
